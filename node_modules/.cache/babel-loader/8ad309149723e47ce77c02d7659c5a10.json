{"ast":null,"code":"var _jsxFileName = \"/Users/tatyanavinnik/Documents/typescript/my-app/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TodoForm } from \"./components/TodoForm\";\nimport { TodoList } from \"./components/TodoList\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  const addHandler = title => {\n    const newTodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    };\n    setTodos(prev => [newTodo, ...prev]);\n  };\n\n  const toggleHandler = id => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeHandler = id => {\n    const shouldRemove = window.confirm(\"Are you sure you want to delete the element?\");\n\n    if (shouldRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TodoForm, {\n    onAdd: addHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    onRemove: removeHandler,\n    onToggle: toggleHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tatyanavinnik/Documents/typescript/my-app/src/App.tsx"],"names":["React","useState","Navbar","TodoForm","TodoList","App","todos","setTodos","addHandler","title","newTodo","id","Date","now","completed","prev","toggleHandler","map","todo","removeHandler","shouldRemove","window","confirm","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AAGA,MAAMC,GAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAU,EAAV,CAAlC;;AAEA,QAAMO,UAAU,GAAIC,KAAD,IAAmB;AACpC,UAAMC,OAAc,GAAG;AACrBD,MAAAA,KAAK,EAAEA,KADc;AAErBE,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFiB;AAGrBC,MAAAA,SAAS,EAAE;AAHU,KAAvB;AAKAP,IAAAA,QAAQ,CAACQ,IAAI,IAAI,CAACL,OAAD,EAAU,GAAGK,IAAb,CAAT,CAAR;AACD,GAPD;;AASA,QAAMC,aAAa,GAAIL,EAAD,IAAgB;AACpCJ,IAAAA,QAAQ,CAACQ,IAAI,IACXA,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACf,UAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB,EAAoB;AAClBO,QAAAA,IAAI,CAACJ,SAAL,GAAiB,CAACI,IAAI,CAACJ,SAAvB;AACD;;AACD,aAAOI,IAAP;AACD,KALD,CADM,CAAR;AAQD,GATD;;AAWA,QAAMC,aAAa,GAAIR,EAAD,IAAgB;AACpC,UAAMS,YAAY,GAAGC,MAAM,CAACC,OAAP,CACnB,8CADmB,CAArB;;AAGA,QAAIF,YAAJ,EAAkB;AAChBb,MAAAA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,CAACQ,MAAL,CAAYL,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhC,CAAT,CAAR;AACD;AACF,GAPD;;AAQA,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAEF,KADT;AAEE,IAAA,QAAQ,EAAEa,aAFZ;AAGE,IAAA,QAAQ,EAAEH,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CADF;AAaD,CA5CD;;AA8CA,eAAeX,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TodoForm } from \"./components/TodoForm\";\nimport { TodoList } from \"./components/TodoList\";\nimport { ITodo } from \"./interfaces\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    };\n    setTodos(prev => [newTodo, ...prev]);\n  };\n\n  const toggleHandler = (id: number) => {\n    setTodos(prev =>\n      prev.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeHandler = (id: number) => {\n    const shouldRemove = window.confirm(\n      \"Are you sure you want to delete the element?\"\n    );\n    if (shouldRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n    }\n  };\n  return (\n    <>\n      <Navbar />\n      <div className=\"container\">\n        <TodoForm onAdd={addHandler} />\n        <TodoList\n          todos={todos}\n          onRemove={removeHandler}\n          onToggle={toggleHandler}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}